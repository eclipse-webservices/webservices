<?xml version="1.0" encoding="utf-8"?>
<!--Arbortext, Inc., 1988-2005, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="cjaxrpc" xml:lang="en-us">
<title>JAX-RPC</title>
<shortdesc>JAX-RPC stands for <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> API for XML-based RPC, also known as
JSR 101. It is a specification that describes <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> Application Programming Interfaces
(APIs) and conventions for building Web services and Web service clients that
use remote procedure calls (RPC) and XML. It standardizes the <tm tmclass="special"
tmowner="Sun Microsystems, Inc." tmtype="tm" trademark="Java">Java</tm> to
WSDL and WSDL to <tm tmclass="special" tmowner="Sun Microsystems, Inc." tmtype="tm"
trademark="Java">Java</tm> mappings, and provides the core APIs for developing
Web services and Web service clients on the <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> platform. Often used in a distributed
client/server model, an RPC mechanism enables clients to execute procedures
on other systems.</shortdesc>
<prolog><metadata>
<keywords><indexterm>JAX-RPC</indexterm><indexterm>Web services<indexterm>JAX-RPC</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>The current release of JAX-RPC requires the support of SOAP over HTTP for
interoperability purposes. The SOAP specification defines message structure,
encoding rules, and conventions for exchanging information in the RPC programming
model. These calls and responses are transmitted as SOAP messages over HTTP.
In this release, JAX-RPC supports SOAP 1.1 and HTTP 1.1. For more information
on SOAP, refer to <xref href="csoap.dita" scope="local"></xref>.</p>
<p>Although the underlying run-time mechanisms (for example, <tm tmclass="special"
tmowner="Sun Microsystems, Inc." tmtype="tm" trademark="Java">Java</tm> to
WSDL serialization, WSDL to <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> deserialization, protocol and transport)
are very complex, the API hides this complexity from the application developer.
On the server side, the developer can provide a Service Endpoint Interface
(SEI); alternately an SEI can be created using the Web services wizrds. An
SEI is an interface written in the <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> programming language that specifies
the remote procedures of a Web service. The developer also provides the implementation
of a Web service, in the form of one or more <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> classes that implement methods of the
same signature as those on the SEI. Client programs are also easy to code.
A client creates a proxy, a local object representing the service implementation
and the SEI, and then simply invokes methods on the proxy.</p>
<p>JAX-RPC is highly interoperable: a JAX-RPC client can access a Web service
that is not running on the <tm tmclass="special" tmowner="Sun Microsystems, Inc."
tmtype="tm" trademark="Java">Java</tm> platform and vice versa. This flexibility
is possible because JAX-RPC uses SOAP over HTTP, and the Web Service Description
Language (WSDL). JAX-RPC was designed to support WS-I.</p>
<p>For more information on JAX-RPC, refer to the  <xref format="html" href="http://www.jcp.org/en/jsr/detail?id=101"
scope="external">official JSR 101 specifications</xref>.</p>
</conbody>
<related-links>
<linklist><title>Related Concepts</title>
<link href="cws.dita"></link>
<link href="cwsinwsa.dita"></link>
<link href="cjsr109.dita"></link>
</linklist>
<linklist><title>Related Tasks</title>
<link href="../tasks/toverws.dita" scope="peer"><linktext> Developing Web
services</linktext></link>
</linklist>
</related-links>
</concept>
