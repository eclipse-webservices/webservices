<?xml version="1.0" encoding="utf-8"?>
<!--Arbortext, Inc., 1988-2005, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"  "concept.dtd">
<concept id="cws" xml:lang="en-us">
<title>Web services overview</title>
<shortdesc>A Web service is a set of related application functions that can
be programmatically invoked over the Internet. Businesses can dynamically
mix and match Web services to perform complex transactions with minimal programming.
Web services allow buyers and sellers all over the world to discover each
other, connect dynamically, and execute transactions in real time with minimal
human interaction.</shortdesc>
<conbody>
<p>Web services are self-contained, self-describing modular applications that
can be published, located, and invoked across the Web.</p>
<lq> <p> <uicontrol>Web services are self-contained.</uicontrol> On the client
side, no additional software is required.&nbsp; A programming language with
XML and HTTP client support is enough to get you started.&nbsp; On the server
side, a Web server and servlet engine are required.&nbsp; The client and server
can be implemented in different environments.&nbsp; It is possible to Web
service enable an existing application without writing a single line of code.</p> <p> <uicontrol>Web
services are self-describing.</uicontrol> The client and server need to recognize
only the format and content of request and response messages.&nbsp; The definition
of the message format travels with the message; no external metadata repositories
or code generation tools are required.</p> <p> <uicontrol>Web services are
modular.</uicontrol> Simple Web services can be aggregated to form more complex
Web services either by using workflow techniques or by calling lower layer
Web services from a Web service implementation.</p><p><uicontrol>Web Services
are platform independent.</uicontrol> Web services are based on a concise
set of open, XML-based standards designed to promote interoperability between
a Web service and clients across a variety of computing platforms and programming
languages.</p> </lq>
<p>Web services might be anything, for example, theatre review articles, weather
reports, credit checks, stock quotations, travel advisories, or airline travel
reservation processes. Each of these self-contained business services is an
application that can easily integrate with other services, from the same or
different companies, to create a complete business process. This interoperability
allows businesses to dynamically publish, discover, and bind a range of Web
services through the Internet.</p>
<section><title>Categories of Web services</title><p>Web services can be grouped
into three categories:</p><lq> <p> <uicontrol>Business information.</uicontrol> A
business shares information with consumers or other businesses. In this case,
the business is using Web services to expand its scope. Examples of business
informational Web services are news streams, weather reports, or stock quotations.</p> <p> <uicontrol>Business
integration.</uicontrol> A business provides transactional, "for fee" services
to its customers. In this case, the business becomes part of a global network
of value-added suppliers that can be used to conduct commerce. Examples of
business integration Web services include bid and auction e-marketplaces,
reservation systems, and credit checking.</p> <p> <uicontrol>Business process
externalization.</uicontrol> A business differentiates itself from its competition
through the creation of a global value chain. In this case, the business uses
Web services to dynamically integrate its processes. An example of business
process externalization Web services is the associations between different
companies to combine manufacturing, assembly, wholesale distribution, and
retail sales of a particular product.</p> </lq></section>
<section><title>Service roles and interactions</title><p>A network component
in a Web Services architecture can play one or more fundamental roles: service
provider, service broker, and service client.</p><ul>
<li>Service providers create and deploy their Web services and can publish
the availability of their WSDL-described services through a service registry,
such as a UDDI Business Registry.</li>
<li>Service brokers register and categorize published services and provide
search services. For example, UDDI acts as a service broker for WSDL-described
Web services.</li>
<li>Service clients use broker services such as the UDDI Business Registry
to discover a needed WSDL-described service and then bind to and call the
service provider.</li>
</ul><p>Binding involves establishing all environmental prerequisites that
are necessary to successfully complete the services. Examples of environmental
prerequisites include security, transaction monitoring, and HTTP availability.
The relationships between these roles are described in Figure 1.</p><p>Figure
1. Service roles and interactions.</p><p> <image alt="Figure 1 illustrates the interactions between the service broker, service provider, and service requestor."
href="../images/roles.gif"></image> </p><p>For more information on Web services,
refer to  <xref format="html" href="http://www.ibm.com/developerworks/webservices"
scope="external">www..com/developerworks/webservices</xref></p></section>
</conbody>
<related-links>
<linklist><title>Related Concepts</title>
<link href="cwsinwsa.dita"><linktext>Tools for Web services development</linktext>
</link>
<link href="cwsstandards.dita" scope="local"><linktext>Web services standards</linktext>
</link>
</linklist>
<linklist><title>Related Tasks</title>
<link href="../tasks/toverws.dita" scope="local"><linktext> Developing Web
services</linktext></link>
</linklist>
</related-links>
</concept>
