!-- REQUIRED. Differentiates from "client" scenario.  See axisclient.properties.
scenarioType=service

!-- REQUIRED.  Workspace relative URI to the input WSDL or Java
InitialSelection=/projectName/WebContent/StockQuote.wsdl

!-- not intended for use at the command line at the command line since it is a UI feature...
!-- MonitorService - set to true to monitor SOAP traffic for the web service - type:boolean
MonitorService=false 

!-- not intended for use at the command line since it is a UI feature...although at the 
!-- command line it may simply launch a browser?? 
!--TestService - set to true to indicate test with the web services explorer type:boolean
TestService=false  

!-- jvh - add extensions for these on ResourceContext - will need a ResourceContextModifier?  Or set all to true by default?? 
!-- what would be the case where a user would set them to false for non-UI??
!--OverwriteFilesEnabled - set to true to overwrite files that already exist. type:boolean 
!-- note for non-interactive mode it is recommended that this be set to true
OverwriteFilesEnabled=true

!--CreateFoldersEnabled - set to true create folders necessary during file generation type:boolean
!-- note for non-interactive mode it is recommended that this be set to true
CreateFoldersEnabled=true

!--CheckoutFilesEnabled - set to true to check out files with no warning to the user type:boolean
!-- note for non-interactive mode it is recommended that this be set to true
CheckoutFilesEnabled=true

!--ServiceTypeRuntimeServer 
!--- Server.RuntimeId ID of web service runtime - must be compatible with server & one of: <check with Rupam> type:String  
Server.RuntimeId=
!--Server.ServerId - ID of server - must be compatible with runtime & one of: <check with Rupam> type:String 
Server.ServerId=
!--Server.TypeId - Type ID for the server - one of:  <check with Rupam> - type:String 
Server.TypeId=

!-- StartService. Set to true if the service should be started after generation.  type: boolean
StartService=true
!-- PublishService. Set to true to launch Web Service Explorer and publish service to UDDI registry.  type: boolean
PublishService=false

!--ServiceProjectName - !--type:String - name of Service project - this property would be used to give the service project a different name than the project containing the initial selection.  type: String    
ServiceProjectName=serviceProjectName
!--ServiceProjectName - !--type:String - name of Service project - this property would be used to give the service project a different name than the project containing the initial selection.  type: String
ServiceEarProjectName=serviceEarProjectName

!-- TestID. Name of a valid test facility - - must be one of: <jvh: list of valid project type IDs...ask Rupam?> type:String 
<!-- only needs to be set if TestService is true -->
TestID= 

!--PublishToPrivateUDDI. Set to true if service should be published to a private UDDI registry.  type: boolean
PublishToPrivateUDDI=false
!--PublishToPublicUDDI. Set to true if service should be published to a public UDDI registry. type: boolean
PublishToPublicUDDI=false
!--  Set if PublishToPublicUDDI is set to true. type:String
!--<jvh> will need to add a transformer from this to LaunchOptions...also what are valid values? Chris?
LaunchOptions=

!-- AXIS SERVICE ----
!-- All scenarios. String: workspace relative URI <jvh - can it be any URI?> to property file containing mappings
!-- Top Down - Mappings that are used to override the default package names of the generated Java template classes.  
!-- file format: file extension must be .properties.  For bottom up, the content of the properties file must be of the format package = namespace .
!-- For top down, the content of the properties file must be of the format namespace=package
!--<jvh> need to confirm: note from WS cmd line tool help - Note: When using this argument, all namespace references must have the colon ':' escaped using a backslash as follows: http\://my.namespace.WSDL2WebService ignores any namespace references that do not contain an escaped colon.
Mappings=/testProj/mappings/mappings.txt

!-- Top down - String: the workspace relative URI for a Java source folder for the generated Java code - must be existing workspace source folder
JavaOutput=/projectName/JavaSource

!-- Bottom up - comma delimited string of method names to be exposed in output WSDL.  If no list is provided, all methods are exposed.
Methods=
!-- Bottom up - String: one of: RPC, DOCUMENT, WRAPPED
Style=DOCUMENT
!-- Bottom up - String: one of: LITERAL, ENCODED 
Use=LITERAL																												 
